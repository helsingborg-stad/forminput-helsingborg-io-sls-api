{
  "boilerPlates": {
    "prefix": "lambda",
    "body": [
      "import log from '../libs/logs';",
      "import { BadRequestError } from '@helsingborg-stad/npm-api-error-handling';",
      "import * as response from '../libs/response';\n",
      "// Interface describing the INPUT data of the function",
      "// This is the data extracted from the AWS event structure,",
      "// Either as a whole or as the parsed body property.",
      "export interface LambdaRequest {",
      "\tproperty: string;",
      "}",
      "// Interface describing the OUTPUT data of the function",
      "// In general, this is the actual response data without any",
      "// envelope needed by AWS.",
      "export interface LambdaResponse {",
      "\tproperty: string;",
      "}",
      "// Interface describing the EXTERNAL DEPENDENCIES used by the function",
      "// This interface will be instantiated differently for",
      "// production and testing mode to allow a wide variety",
      "// of test cases to be executed without dependencies being",
      "// available.",
      "export interface Dependencies {",
      "\tdependency: (value: string) => string;",
      "}\n",
      "// The validateRequest function secures that the external data",
      "// provided from the AWS event structure is of the expected format",
      "// This is especially important when user provided data might be",
      "// supplied",
      "function validateRequest(data: LambdaRequest): LambdaRequest {",
      "\tif (data?.property) {",
      "\t\treturn data;",
      "\t}",
      "\tthrow new BadRequestError();",
      "}",
      "// The main function is where the SETUP takes place.",
      "// this is where all pre-requisites for a successfull execution",
      "// is prepared (Such as linking dependencies)",
      "export const main = log.wrap(async event => {",
      "\treturn ${TM_FILENAME_BASE}(event, {",
      "\t\tdependency: (value) => value",
      "\t\t});",
      "});\n",
      "// the '${TM_FILENAME_BASE}' function is where the execution takes place",
      "// Dependencies are either prepared from the main function (production) or",
      "// provide custom handlers from a test case",
      "export async function ${TM_FILENAME_BASE}(event, dependencies: Dependencies) {",
      "\ttry {",
      "\t\tvalidateRequest(JSON.parse(event.body));\n",
      "\t\t// Prepare response aligned with the LambdaResponse interface",
      "\t\t// In the example, the response is populated from a call to an",
      "\t\t// external dependency",
      "\t\tconst data: LambdaResponse = {",
      "\t\t\tproperty: dependencies.dependency('value'),",
      "\t\t};",
      "\t\treturn response.success(200, data);",
      "\t} catch (ex) {",
      "\t\treturn response.failure(ex);",
      "\t}",
      "}"
    ]
  }
}
