service: viva-ms

plugins:
  - serverless-bundle

projectDir: ../../

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-north-1
  endpointType: regional
  eventBridge:
    useCloudFormation: true
  tracing:
    apiGateway: false
    lambda: true

  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - SSM:GetParameter*
          Resource:
            - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${file(../../config.json):${self:custom.stage}.vada.envsKeyName}'
            - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${file(../../config.json):${self:custom.stage}.cases.providers.viva.envsKeyName}'

        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: '*'

        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - Fn::ImportValue: ${self:custom.resourcesStage}-AttachmentsBucketArn
            - Fn::Join:
                - ''
                - - Fn::ImportValue: ${self:custom.resourcesStage}-AttachmentsBucketArn
                  - '/*'
            - Fn::ImportValue: ${self:custom.resourcesStage}-PdfStorageBucketArn
            - Fn::Join:
                - ''
                - - Fn::ImportValue: ${self:custom.resourcesStage}-PdfStorageBucketArn
                  - '/*'

        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:GetItem
          Resource:
            - 'Fn::ImportValue': ${self:custom.resourcesStage}-CasesTableArn

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
          Resource:
            - 'Fn::ImportValue': ${self:custom.resourcesStage}-UsersTableArn

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
          Resource:
            - 'Fn::ImportValue': ${self:custom.resourcesStage}-FormsTableArn

        - Effect: Allow
          Action:
            - kms:Decrypt
            - kms:GenerateDataKey
          Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*

functions:
  applicationStatus:
    handler: lambdas/applicationStatus.main
    timeout: 15
    events:
      - eventBridge:
          pattern:
            source:
              - usersMs.findUser
            detail-type:
              - usersMsFindUserSuccess
      - eventBridge:
          pattern:
            source:
              - vivaMs.submitApplication
            detail-type:
              - applicationReceivedSuccess

  personApplicationStatus:
    handler: lambdas/personApplicationStatus.main
    timeout: 15
    events:
      - eventBridge:
          pattern:
            source:
              - vivaMs.applicationStatus
            detail-type:
              - applicationStatusSuccess

  personApplication:
    handler: lambdas/personApplication.main
    timeout: 15
    events:
      - eventBridge:
          pattern:
            source:
              - vivaMs.personApplicationStatus
            detail-type:
              - checkOpenPeriodSuccess

  createVivaCase:
    handler: lambdas/createVivaCase.main
    timeout: 15
    events:
      - eventBridge:
          pattern:
            source:
              - vivaMs.personApplication
            detail-type:
              - personDetailSuccess

  submitApplication:
    handler: lambdas/submitApplication.main
    timeout: 15
    events:
      - sqs:
          arn: !ImportValue ${self:custom.stage}-VivaSubmissionQueue
          batchSize: 1

  checkCompletionsStatus:
    handler: lambdas/checkCompletionsStatus.main
    timeout: 15
    events:
      - eventBridge:
          pattern:
            source:
              - vivaMs.applicationStatus
            detail-type:
              - applicationStatusSuccess

  setCaseCompletions:
    handler: lambdas/setCaseCompletions.main
    timeout: 15
    events:
      - eventBridge:
          pattern:
            source:
              - vivaMs.checkCompletionsStatus
            detail-type:
              - checkCompletionsStatusRequired

  submitCompletion:
    handler: lambdas/submitCompletion.main
    timeout: 15
    environment:
      BUCKET_NAME: !ImportValue ${self:custom.resourcesStage}-AttachmentsBucketName
    events:
      - eventBridge:
          pattern:
            source:
              - casesApi.updateCase
            detail-type:
              - casesApiUpdateCaseSuccess
            detail:
              status:
                type: [{ 'prefix': 'active:submitted' }]
              state: ['VIVA_RANDOM_CHECK_REQUIRED', 'VIVA_COMPLETION_REQUIRED']

  syncOfficers:
    handler: lambdas/syncOfficers.main
    timeout: 15
    events:
      - eventBridge:
          pattern:
            source:
              - cases.database
            detail-type:
              - INSERT
              - MODIFY
            detail:
              dynamodb:
                NewImage:
                  provider:
                    S: ['VIVA']

  syncWorkflow:
    handler: lambdas/syncWorkflow.main
    timeout: 15
    events:
      - eventBridge:
          pattern:
            source:
              - bankId.collect
            detail-type:
              - BankIdCollectComplete

  decideCaseStatus:
    handler: lambdas/decideCaseStatus.main
    events:
      - eventBridge:
          pattern:
            source:
              - vivaMs.syncWorkflow
            detail-type:
              - syncWorkflowSuccess

  syncExpiryTime:
    handler: lambdas/syncExpiryTime.main
    events:
      - eventBridge:
          pattern:
            source:
              - casesApi.updateCase
            detail:
              state:
                [{ 'anything-but': ['VIVA_RANDOM_CHECK_REQUIRED', 'VIVA_COMPLETION_REQUIRED'] }]
      - eventBridge:
          pattern:
            source:
              - vivaMs.decideCaseStatus
      - eventBridge:
          pattern:
            source:
              - vivaMs.setCaseCompletions

  generateRecurringCaseHtml:
    handler: lambdas/generateRecurringCaseHtml.main
    environment:
      PDF_STORAGE_BUCKET_NAME: !ImportValue ${self:custom.resourcesStage}-PdfStorageBucketName
    events:
      - eventBridge:
          pattern:
            source:
              - casesApi.updateCase
            detail-type:
              - casesApiUpdateCaseSuccess
            detail:
              status:
                type: [{ 'prefix': 'active:submitted' }]
              state: ['VIVA_CASE_CREATED']
