service: cases

plugins:
  - serverless-bundle
  - serverless-offline

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-north-1
  endpointType: regional
  logs:
    restApi: true
  tracing:
    apiGateway: true
    lambda: true

  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}

  apiGateway:
    restApiId:
      "Fn::ImportValue": ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      "Fn::ImportValue": ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId
    restApiResources:
      cases:
        "Fn::ImportValue": ${self:custom.stage}-ExtApiGatewayResourceCases

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      # Restrict our IAM role permissions to the specific table for the stage
      Resource:
        - "Fn::ImportValue": ${self:custom.resourcesStage}-CasesTableArn

functions:
  get:
    handler: lambdas/get.main
    events:
      - http:
          path: /cases/{id}
          method: get
          cors: true
          # authorizer: ${cf:hbg-authorizer-${self:custom.stage}.AuthorizeLambdaFunctionQualifiedArn}

  create:
    handler: lambdas/create.main
    events:
      - http:
          path: /cases
          method: post
          cors: true
          # authorizer: ${cf:hbg-authorizer-${self:custom.stage}.AuthorizeLambdaFunctionQualifiedArn}
