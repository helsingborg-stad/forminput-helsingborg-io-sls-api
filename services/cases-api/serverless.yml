service: cases-api

plugins:
  - serverless-bundle

projectDir: ../../

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-north-1
  endpointType: regional
  tracing:
    lambda: true

  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}

  apiGateway:
    restApiId: !ImportValue ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId: !ImportValue ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId
    restApiResources:
      cases: !ImportValue ${self:custom.stage}-ExtApiGatewayResourceCases

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: '*'

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
          Resource:
            - !ImportValue ${self:custom.resourcesStage}-CasesTableArn
            - !ImportValue ${self:custom.resourcesStage}-CasesTableAllIndexArn

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
          Resource:
            - !ImportValue ${self:custom.resourcesStage}-UsersTableArn

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
          Resource:
            - !ImportValue ${self:custom.resourcesStage}-FormsTableArn

        - Effect: Allow
          Action:
            - kms:Decrypt
          Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*

functions:
  getCase:
    handler: src/lambdas/getCase.main
    events:
      - http:
          path: /cases/{id}
          method: get
          cors: true
          private: true
          authorizer:
            type: TOKEN
            authorizerId: !ImportValue ${self:custom.stage}-authorizerId

  getCaseList:
    handler: src/lambdas/getCaseList.main
    events:
      - http:
          path: /cases
          method: get
          cors: true
          private: true
          authorizer:
            type: TOKEN
            authorizerId: !ImportValue ${self:custom.stage}-authorizerId

  createCase:
    handler: src/lambdas/createCase.main
    events:
      - http:
          path: /cases
          method: post
          cors: true
          private: true
          authorizer:
            type: TOKEN
            authorizerId: !ImportValue ${self:custom.stage}-authorizerId

  updateCase:
    handler: src/lambdas/updateCase.main
    events:
      - http:
          path: /cases/{id}
          method: put
          cors: true
          private: true
          authorizer:
            type: TOKEN
            authorizerId: !ImportValue ${self:custom.stage}-authorizerId

  deleteCase:
    handler: src/lambdas/deleteCase.main
    events:
      - http:
          path: /cases/{id}
          method: delete
          cors: true
          private: true
          authorizer:
            type: TOKEN
            authorizerId: !ImportValue ${self:custom.stage}-authorizerId
