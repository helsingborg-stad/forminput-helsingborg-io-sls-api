service: authorizer

plugins:
  - serverless-bundle
  - serverless-add-api-key

projectDir: ../../../

custom: ${file(../../../serverless.common.yml):custom}

package:
  individually: true

provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-north-1
  endpointType: regional
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId
    restApiResources:
      auth:
        'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayResourceAuth

  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${file(../../../config.json):${self:custom.stage}.auth.secrets.accessToken.name}-??????'
            - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${file(../../../config.json):${self:custom.stage}.auth.secrets.refreshToken.name}-??????'
            - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${file(../../../config.json):${self:custom.stage}.auth.secrets.authorizationCode.name}-??????'
        - Effect: Allow
          Action:
            - SSM:GetParameter*
          Resource:
            - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${file(../../../config.json):${self:custom.stage}.visma.envsKeyName}'

functions:
  authorizer:
    handler: src/lambdas/authorize.main

  generateToken:
    handler: src/lambdas/generateToken.main
    events:
      - http:
          path: auth/token
          method: post
          cors: true
          private: true

  session:
    handler: src/lambdas/session.main
    events:
      - http:
          path: auth/session
          method: post
          cors: true
          private: true

resources:
  Resources:
    AuthorizerPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: AuthorizerLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal:
          Fn::Join: ['', ['apigateway.', { Ref: 'AWS::URLSuffix' }]]
    Authorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ${self:custom.stage}-Authorizer
        RestApiId: ${self:provider.apiGateway.restApiId}
        Type: TOKEN
        IdentitySource: method.request.header.Authorization
        AuthorizerResultTtlInSeconds: 300
        AuthorizerUri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - Fn::GetAtt: 'AuthorizerLambdaFunction.Arn'
              - '/invocations'
  Outputs:
    AuthorizerId:
      Value:
        Ref: Authorizer
      Export:
        Name: ${self:custom.stage}-authorizerId
