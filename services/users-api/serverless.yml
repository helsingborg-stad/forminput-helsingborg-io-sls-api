org: hbgworks
service: users-api

frameworkVersion: ^3.26.0

plugins:
  - serverless-bundle
  - serverless-apigw-binary

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-north-1
  endpointType: regional
  versionFunctions: false
  tracing:
    lambda: true

  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}

  apiGateway:
    restApiId: !ImportValue ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId: !ImportValue ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId
    restApiResources:
      users: !ImportValue ${self:custom.stage}-ExtApiGatewayResourceUsers

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
          Resource:
            - !ImportValue ${self:custom.resourcesStage}-UsersTableArn

        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:ListObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            - !ImportValue ${self:custom.resourcesStage}-AttachmentsBucketArn
            - !Join
              - ''
              - - !ImportValue ${self:custom.resourcesStage}-AttachmentsBucketArn
                - '/*'

        - Effect: Allow
          Action:
            - kms:Decrypt
            - kms:DescribeKey
            - kms:Encrypt
            - kms:GenerateDataKey*
            - kms:ReEncrypt*
          Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*

functions:
  me:
    handler: src/lambdas/getUser.main
    events:
      - http:
          path: /users/me
          method: get
          cors: true
          private: true
          authorizer:
            type: TOKEN
            authorizerId: !ImportValue ${self:custom.stage}-authorizerId

  uploadAttachment:
    handler: src/lambdas/uploadAttachment.main
    environment:
      BUCKET_NAME: !ImportValue ${self:custom.resourcesStage}-AttachmentsBucketName
    events:
      - http:
          path: /users/me/attachments
          method: post
          cors: true
          private: true
          authorizer:
            type: TOKEN
            authorizerId: !ImportValue ${self:custom.stage}-authorizerId

  getAttachment:
    handler: src/lambdas/getAttachment.main
    environment:
      BUCKET_NAME: !ImportValue ${self:custom.resourcesStage}-AttachmentsBucketName
    events:
      - http:
          path: /users/me/attachments/{filename}
          method: get
          cors: true
          private: true
          authorizer:
            type: TOKEN
            authorizerId: !ImportValue ${self:custom.stage}-authorizerId
