service: forms-api

plugins:
  - serverless-esbuild
  - serverless-add-api-key

projectDir: ../../

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-north-1
  endpointType: regional
  tracing:
    lambda: true

  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId
    restApiResources:
      forms:
        'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayResourceForms

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - 'Fn::ImportValue': ${self:custom.resourcesStage}-FormsTableArn

functions:
  getFormList:
    handler: src/lambdas/getFormList.main
    events:
      - http:
          path: /forms
          method: get
          cors: true
          private: true

  getForm:
    handler: src/lambdas/getForm.main
    events:
      - http:
          path: /forms/{formId}
          method: get
          cors: true
          private: true

  createForm:
    handler: src/lambdas/createForm.main
    events:
      - http:
          path: /forms
          method: post
          cors: true
          private: true

  updateForm:
    handler: src/lambdas/updateForm.main
    events:
      - http:
          path: /forms/{formId}
          method: put
          cors: true
          private: true

  deleteForm:
    handler: src/lambdas/deleteForm.main
    events:
      - http:
          path: /forms/{formId}
          method: delete
          cors: true
          private: true
